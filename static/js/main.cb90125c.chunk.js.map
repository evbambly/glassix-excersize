{"version":3,"sources":["logo.svg","environment.js","map.js","menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","environment","Map","src","queryParams","location","props","ipData","latitude","longitude","this","mode","streetViewMode","viewMode","searchMode","console","log","city","chooseMode","className","title","frameBorder","style","border","allowFullScreen","country_name","React","Component","Menu","state","value","BottomNavigation","onChange","event","newValue","setState","callback","showLabels","BottomNavigationAction","label","icon","App","callbackMapOption","childData","mapOption","render","loaded","document","fetch","then","res","json","data","catch","err","headElement","fontSize","href","target","rel","logo","alt","Boolean","window","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb90125c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1666b365.svg\";","export const environment = {\r\n    ipDataKey: '866f14bacc59aac91d16699a0e1da7edd60f3f4939767f01faa5f4cc',\r\n    googleApiKey: 'AIzaSyCdQymwSuF0P6Ee-ffX0ZtWjpJdpaT5eLk'\r\n}","import React from 'react';\r\nimport { environment } from './environment'\r\nimport './map.css';\r\n\r\nclass Map extends React.Component {\r\n    src = \"\"\r\n    queryParams = \"\"\r\n    chooseMode() {\r\n        this.src = \"https://www.google.com/maps/embed/v1/\";\r\n        switch (this.props.mode) {\r\n            case 0:\r\n            default:\r\n                this.streetViewMode()\r\n                break;\r\n            case 1:\r\n                this.viewMode();\r\n                break;\r\n            case 2:\r\n                this.searchMode()\r\n                break;\r\n        }\r\n        console.log(this.props.ipData.latitude)\r\n        this.src += \"?key=\" + environment.googleApiKey + this.queryParams;\r\n    }\r\n\r\n    location = (this.props.ipData.latitude || '32.07') + ',' + (this.props.ipData.longitude || '34.79')\r\n    viewMode() {\r\n        this.src += \"view\"\r\n        this.queryParams = \"&center=\" + this.location + \"&zoom=12&maptype=satellite\"\r\n    }\r\n    streetViewMode() {\r\n        this.src += \"streetview\";\r\n        this.queryParams = \"&location=\" + this.location + \"&heading=210&pitch=10&fov=35\";\r\n    }\r\n    searchMode() {\r\n        this.src += \"search\";\r\n        this.queryParams = \"&&q=mcdonald's+in+\" + (this.props.ipData.city || 'tel+aviv');\r\n    }\r\n    render() {\r\n        this.chooseMode();\r\n        return (\r\n            <div>\r\n                <div className=\"iframe-container\">\r\n                    <iframe\r\n                        title=\"display_map\"\r\n                        frameBorder=\"0\" style={{ border: \"0\" }}\r\n                        src={this.src} allowFullScreen>\r\n                    </iframe>\r\n                </div>\r\n                <p>\r\n                    Are you currently in {this.props.ipData.city}, {this.props.ipData.country_name}?\r\n            <br></br>\r\n                    Well, your ISP thinks you are.\r\n            </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport { BottomNavigation } from '@material-ui/core';\r\nimport { BottomNavigationAction } from '@material-ui/core';\r\nimport AssistantPhotoIcon from '@material-ui/icons/AssistantPhoto';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nclass Menu extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: 1\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <BottomNavigation\r\n        value={this.state.value}\r\n        onChange={(event, newValue) => {\r\n          this.setState({ value: newValue });\r\n          this.props.callback(newValue);\r\n        }}\r\n        showLabels\r\n      >\r\n        <BottomNavigationAction label=\"StreetView\" icon={<AssistantPhotoIcon />} />\r\n        <BottomNavigationAction label=\"View\" icon={<LocationOnIcon/>} />\r\n        <BottomNavigationAction label=\"Search\" icon={<SearchIcon />} />\r\n      </BottomNavigation>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Map from './map';\nimport Menu from './menu';\nimport { environment } from './environment'\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mapOption: 1,\n      ipData: {},\n      loaded: false\n    };\n\n  }\n  componentDidMount() {\n    document.title = \"Glassix Excersize\";\n    fetch('https://api.ipdata.co/?api-key=' + environment.ipDataKey)\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ ipData: data, loaded: true })\n      }).catch((err) => console.log(err))\n  }\n\n  callbackMapOption = (childData) => {\n    if (childData !== this.state.mapOption) {\n      this.setState({ mapOption: childData });\n      this.render();\n    }\n  }\n  render() {\n    const headElement = (\n      <div className=\"Map-header\">\n        <h2>\n          <GitHubIcon fontSize={\"large\"} />\n          &nbsp; #Github &nbsp;\n          <a className=\"App-link\" href=\"https://github.com/evbambly/glassix-excersize\" \n          target=\"_blank\" rel=\"noopener noreferrer\">Eitan's App</a>\n        </h2>\n      </div>\n    )\n    if (this.state.loaded) {\n      console.log(this.state.ipData)\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            {headElement}\n            <div className=\"map\">\n              <Map mode={this.state.mapOption} ipData={this.state.ipData} />\n            </div>\n            <Menu callback={this.callbackMapOption} />\n          </header>\n        </div >\n      );\n    }\n    else {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            {headElement}\n            <h3>Loading...</h3>\n          </header>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}